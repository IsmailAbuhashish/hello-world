
/**
 * A bubble generator where whenever you click bubles of all shapes, sizes and speeds appear, 
 * and after a certain time the bubbles get removed.
 *
 * @author (Ismail Abuhashish)
 * @version (22/7/19)
 */
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.Font;
import java.awt.FontMetrics;
import java.util.*;
import javax.swing.Timer;

public class DrawBubbles {

    private JFrame frame;

    // The method to set up
    public DrawBubbles() {

        frame = new JFrame("Bubble Generator");
        frame.setSize(600, 400);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // the event that triggers the end of the program
        frame.setPreferredSize(frame.getSize()); 
        frame.add(new DrawBubs(frame.getSize())); // Setting up the DrawBars public class function (getting bars and putting it in this frame)
        frame.pack();
        frame.setVisible(true);

    }

    // The main method
    public static void main(String... argv) {

        new DrawBubbles();
   
    }

    public static class DrawBubs extends JPanel  implements Runnable, MouseListener {

        /*
         * Declare Class Variables Here
         */
        private Thread animator;
        ArrayList<Bubble> b = new ArrayList<Bubble>();


        public DrawBubs(Dimension dimension) {

            setSize(dimension);
            setPreferredSize(dimension);
            addMouseListener(this);
            if (animator == null ) {
                animator = new Thread(this);
                animator.start();
            }

            setDoubleBuffered(true);

        }

        @Override

        public void paintComponent(Graphics g) {

            Graphics2D g2 = (Graphics2D)g;//g2 is the graphics object that we need to use

            //to draw things to the screen
            Dimension d = getSize();
           

            //create a background
            g2.setColor(Color.white);
            g2.fillRect(0, 0, d.width, d.height);
            
            /**/
             for( int i = 0; i< b.size(); i++){
                 Bubble bub = b.get(i);
                 g2.setColor(bub.c);
                 g2.fillOval(bub.x, bub.y, bub.Width, bub.Width);
            }
            
            moveBubbles();
            detectSides();

        }//end of paint usage
            
            public void moveBubbles(){
            for(int i = 0; i< b.size(); i++){
                Bubble bub = b.get(i);
                bub.x += bub.xSpeed;
                bub.y += bub.ySpeed;
            }
        }
        
        public void detectSides(){
            for(int i = 0; i < b.size(); i++){
                Bubble bub = b.get(i);
                if (bub.x > 600 || bub.x < 0){
                bub.xSpeed *= -1;
                    while(bub.ySpeed > 100){
                    bub.ySpeed = bub.ySpeed + 8;
                }
               }               
            
                if (bub.y > 400 || bub.y < 0){
                bub.ySpeed *= -1;
                    while(bub.xSpeed > 100){
                    bub.xSpeed = bub.xSpeed + 8;
                }
               }
             }
             
        }
       

        public void mousePressed(MouseEvent e) {

            int x = e.getX();
            int y = e.getY();
            
            Bubble bub = new Bubble (x,y);
            b.add(bub);
            
            
            repaint();//updates the paint method

        }

        public void mouseReleased(MouseEvent e) {

        }

        public void mouseEntered(MouseEvent e) {

        }

        public void mouseExited(MouseEvent e) {

        }

        public void mouseClicked(MouseEvent e) {

        }

        public void run() {
            long beforeTime, timeDiff, sleep;
            beforeTime = System.currentTimeMillis();
            int animationDelay = 40;
            long time = 
                System.currentTimeMillis();
            while (true) {//infinite loop
                // spriteManager.update();
                repaint();
                try {
                    time += animationDelay;
                    Thread.sleep(Math.max(0,time - 
                            System.currentTimeMillis()));
                }catch (InterruptedException e) {
                    System.out.println(e);
                }//end catch
            }//end while loop
        }//end of run

    }

}

//--------------------------------------------------------------------------------------------------------------------------------------
//2nd class

/**
 * Write a description of class Bubble here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import java.awt.Dimension;
import java.awt.Color;

public class Bubble
{
    int x;
    int y;
    Color c;
    int Width;
    int xSpeed;
    int ySpeed;
   public Bubble(int x , int y){
        // initialise instance variables
        this.x = x;
        this.y = y;
        
        //Random Colors
        int RMax = 255;
        int RMin = 0;
        int randomRNum = (int)(Math.random() * ((RMax - RMin) +1)) + RMin; 
        int GMax = 255;
        int GMin = 0;
        int randomGNum = (int)(Math.random() * ((GMax - GMin) +1)) + GMin; 
        int BMax = 255;
        int BMin = 0;
        int randomBNum = (int)(Math.random() * ((BMax - BMin) +1)) + BMin; 
        
        c = new Color (randomRNum, randomGNum, randomBNum);
        
       //Random Width
       int WMax = 50;
       int WMin = 2;
       int randomWNum = (int)(Math.random() * ((WMax - WMin) +1)) + WMin; 
       Width = randomWNum;
       
       //Random Speeds 
       int xsMax = 20;
       int xsMin = 2;
       int randomXSpeed = (int)(Math.random() * ((xsMax - xsMin) +1)) + xsMin;
       int ysMax = 20;
       int ysMin = 2;
       int randomYSpeed = (int)(Math.random() * ((ysMax - ysMin) +1)) + ysMin;
       xSpeed = randomXSpeed;
       ySpeed = randomYSpeed;
       
    }

    
}
